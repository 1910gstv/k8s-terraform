name: Deploy Infra to Azure

on:
  pull_request:
    branches: main

  push:
    branches: main

jobs:
  bootstrap:
    name: Bootstrap Storage Backend
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
      STORAGE_ACCOUNT_NAME: "controlepedidossa"
      STORAGE_CONTAINER_NAME: "controlepedidossc1"
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0

      - name: Terraform Init (local)
        working-directory: infra/bootstrap
        run: terraform init -backend=false

      - name: Terraform Import Storage Account
        working-directory: infra/bootstrap
        run: terraform import azurerm_storage_account.storage /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Storage/storageAccounts/${{ env.STORAGE_ACCOUNT_NAME }} || true

      - name: Terraform Import Storage Container
        working-directory: infra/bootstrap
        run: terraform import azurerm_storage_container.container /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.Storage/storageAccounts/${{ env.STORAGE_ACCOUNT_NAME }}/blobServices/default/containers/${{ env.STORAGE_CONTAINER_NAME }} || true

      - name: Terraform Apply (bootstrap)
        working-directory: infra/bootstrap
        run: |
          terraform plan \
            -var "resource_group_name=${{ env.RESOURCE_GROUP }}" \
            -var "storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" \
            -var "storage_container_name=${{ env.STORAGE_CONTAINER_NAME }}"
          terraform apply -auto-approve \
            -var "resource_group_name=${{ env.RESOURCE_GROUP }}" \
            -var "storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" \
            -var "storage_container_name=${{ env.STORAGE_CONTAINER_NAME }}" \
            -target=azurerm_storage_account.storage \
            -target=azurerm_storage_container.container

  deploy:
    name: Deploy Infra with Remote State
    runs-on: ubuntu-latest
    needs: bootstrap
    env:
      ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
      ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}
      STORAGE_ACCOUNT_NAME: "controlepedidossa"
      STORAGE_CONTAINER_NAME: "controlepedidossc1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0

      - name: Terraform Init (remote backend)
        working-directory: infra/deploy
        run: |
          terraform init -reconfigure \
            -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ env.STORAGE_CONTAINER_NAME }}" \
            -backend-config="key=cluster-aks.tfstate"

      - name: Terraform Import Resource Group
        working-directory: infra/deploy
        run: terraform import azurerm_resource_group.rg /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/controlepedidos-rg || true

      - name: Terraform Import Virtual Network
        working-directory: infra/deploy
        run: terraform import azurerm_virtual_network.vnet /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/controlepedidos-rg/providers/Microsoft.Network/virtualNetworks/controlepedidos-vnet || true

      - name: Terraform Import Subnet
        working-directory: infra/deploy
        run: terraform import azurerm_subnet.subnet /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/controlepedidos-rg/providers/Microsoft.Network/virtualNetworks/controlepedidos-vnet/subnets/subnet-public-1 || true

      - name: Terraform Import AKS
        working-directory: infra/deploy
        run: terraform import azurerm_kubernetes_cluster.aks /subscriptions/${ARM_SUBSCRIPTION_ID}/resourceGroups/controlepedidos-rg/providers/Microsoft.ContainerService/managedClusters/controlepedidos-aks || true

      - name: Terraform Plan
        working-directory: infra/deploy
        run: terraform plan -out main.tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: infra/deploy
        run: terraform apply -auto-approve main.tfplan
